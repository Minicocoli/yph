#############################################################################
#                                                                           #
#                       spring - cache   redis                              #
#                                                                           #
#############################################################################

spring cache --->redis 不错的博客链接地址:

    1、https://www.ibm.com/developerworks/cn/opensource/os-cn-spring-cache/

    2、https://www.cnblogs.com/fashflying/p/6908028.html

    3、http://caseyscarborough.com/blog/2014/12/18/caching-data-in-spring-using-redis/


1、注解方式:
    缓存一般使用在服务层，在你想缓存的方法上面添加相应的注解即可，下面三个缓存的注解你得掌握。

       @Cacheable  spring 会在其被调用后将返回值缓存起来，以保证下次利用同样的参数来执行该方法时可以直接从缓存中获取结果，而不需要再次执行该方法。

       @CachePut  标注的方法在执行前不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中。

       @CacheEvict 用来标注在需要清除缓存元素的方法或类上的。

   CacheConfig:

          String[] cacheNames() default {};     ------> 缓存名称:

          String keyGenerator() default "";     ------> 缓存key策略

          String cacheManager() default "";     ------> 缓存管理器

          String cacheResolver() default "";    ------> 缓存




/************************************         Spring cache 使用  START    **********************************************/

1、@Cacheable 注解。

    1) : 注解源码--->
        public @interface Cacheable {
            @AliasFor("cacheNames")
            String[] value() default {};                -------> 设置到哪个名称的缓存上去。

            @AliasFor("value")
            String[] cacheNames() default {};           -------> 设置到多个缓存上。比如更新了一个 user ,则要影响到userList缓存。

            String key() default "";                    -------> 缓存key。 比如是user 中的id 作为key。详解请到下面阅读.

            String keyGenerator() default "";           -------> 缓存key 生成策略。可以自己配置自己的生成策略(自定义 实现KeyGenerator接口即可)。

            String cacheManager() default "";           -------> 缓存管理器。

            String cacheResolver() default "";          -------> 缓存解析器。

            String condition() default "";              -------> 缓存条件。

            String unless() default "";                 -------> 会执行语句的判断。类似@Cacheable(value="spittleCache",unless="#result.message.contains('NoCache')")
        }




     @Cacheable可以标记在一个方法上，也可以标记在一个类上。当标记在一个方法上时表示该方法是支持缓存的，
        当标记在一个类上时则表示该类所有的方法都是支持缓存的。对于一个支持缓存的方法，Spring会在其被调用后将其返回值缓存起来，
        以保证下次利用同样的参数来执行该方法时可以直接从缓存中获取结果，而不需要再次执行该方法。Spring在缓存方法的返回值时是以键值对进行缓存的，
        值就是方法的返回结果，至于键的话，Spring又支持两种策略，默认策略和自定义策略，这个稍后会进行说明。
        需要注意的是当一个支持缓存的方法在对象内部被调用时是不会触发缓存功能的。@Cacheable可以指定三个属性，value、key和condition。


    key:
        1):用参数这是key

             ---> 获取方法中的参数使用 "#". 也许是一个对象可以这样--> key="#user.getId()" or key="#user.id"

            @Cacheable(value ="sysMenuType",key="#type")
            public List<SysMenu> findSysMenuListByType(Integer type) {
                HashMap<String, Object> params = new HashMap<>();
                params.put("type",type);
                List<SysMenu> list = sysMenuMapper.findSysMenuListByParams(params);
                return list;
            }


        2) :root对象可以用来生成key.

                     属性名称           描述                            示例

                methodName          当前方法名                    #root.methodName

                method                当前方法                    #root.method.name

                target            当前被调用的对象                  #root.target

                targetClass          当前被调用的对象的class           #root.targetClass

                args                当前方法参数组成的数组                #root.args[0]

                caches              当前被调用的方法使用的Cache       #root.caches[0].name


        3) : condition属性指定发生的条件

              @Cacheable(value={"users"}, key="#user.id", condition="#user.id%2==0")

               public User find(User user) {

                  System.out.println("find user by user " + user);

                  return user;

               }




/************************************         Spring cache 使用  END     **********************************************/






